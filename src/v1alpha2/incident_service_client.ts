// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  APICallback,
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  PaginationResponse,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import * as protosTypes from '../../protos/protos';
import * as gapicConfig from './incident_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  The Incident API for Incident Response & Management.
 * @class
 * @memberof v1alpha2
 */
export class IncidentServiceClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  private _pathTemplates: {[name: string]: gax.PathTemplate};
  private _terminated = false;
  auth: gax.GoogleAuth;
  incidentServiceStub: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of IncidentServiceClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof IncidentServiceClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    const gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof IncidentServiceClient).scopes;
    const gaxGrpc = new gaxModule.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    const protos = gaxGrpc.loadProto(
      opts.fallback ? require('../../protos/protos.json') : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      projectPathTemplate: new gaxModule.PathTemplate('projects/{project}'),
      incidentPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/incidents/{incident}'
      ),
      tagPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/incidents/{incident}/tags/{tag}'
      ),
      signalPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/signals/{signal}'
      ),
      artifactPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/incidents/{incident}/artifacts/{artifact}'
      ),
      subscriptionPathTemplate: new gaxModule.PathTemplate(
        'projects/{project}/incidents/{incident}/subscriptions/{subscription}'
      ),
      incidentRoleAssignmentPathTemplate: new gaxModule.PathTemplate(
        'projects/{project_id_or_number}/incidents/{incident_id}/role_assignments/{role_id}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      searchIncidents: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'incidents'
      ),
      searchSimilarIncidents: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'results'
      ),
      listAnnotations: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'annotations'
      ),
      listTags: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'tags'
      ),
      searchSignals: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'signals'
      ),
      listArtifacts: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'artifacts'
      ),
      listSubscriptions: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'subscriptions'
      ),
      listIncidentRoleAssignments: new gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'incidentRoleAssignments'
      ),
    };

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
      'google.cloud.irm.v1alpha2.IncidentService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.cloud.irm.v1alpha2.IncidentService.
    this.incidentServiceStub = gaxGrpc.createStub(
      opts.fallback
        ? (protos as protobuf.Root).lookupService(
            'google.cloud.irm.v1alpha2.IncidentService'
          )
        : // tslint:disable-next-line no-any
          (protos as any).google.cloud.irm.v1alpha2.IncidentService,
      opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const incidentServiceStubMethods = [
      'createIncident',
      'getIncident',
      'searchIncidents',
      'updateIncident',
      'searchSimilarIncidents',
      'createAnnotation',
      'listAnnotations',
      'createTag',
      'deleteTag',
      'listTags',
      'createSignal',
      'searchSignals',
      'lookupSignal',
      'getSignal',
      'updateSignal',
      'escalateIncident',
      'createArtifact',
      'listArtifacts',
      'updateArtifact',
      'deleteArtifact',
      'sendShiftHandoff',
      'createSubscription',
      'updateSubscription',
      'listSubscriptions',
      'deleteSubscription',
      'createIncidentRoleAssignment',
      'deleteIncidentRoleAssignment',
      'listIncidentRoleAssignments',
      'requestIncidentRoleHandover',
      'confirmIncidentRoleHandover',
      'forceIncidentRoleHandover',
      'cancelIncidentRoleHandover',
    ];

    for (const methodName of incidentServiceStubMethods) {
      const innerCallPromise = this.incidentServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          return stub[methodName].apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = gaxModule.createApiCall(
        innerCallPromise,
        defaults[methodName],
        this._descriptors.page[methodName] ||
          this._descriptors.stream[methodName] ||
          this._descriptors.longrunning[methodName]
      );

      this._innerApiCalls[methodName] = (
        argument: {},
        callOptions?: CallOptions,
        callback?: APICallback
      ) => {
        return apiCall(argument, callOptions, callback);
      };
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'irm.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'irm.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRequest | undefined,
      {} | undefined
    ]
  >;
  createIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a new incident.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.irm.v1alpha2.Incident} request.incident
   *   Required. The incident to create.
   * @param {string} request.parent
   *   Required. The resource name of the hosting Stackdriver project which the incident
   *   belongs to.
   *   The name is of the form `projects/{project_id_or_number}`
   *   .
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Incident]{@link google.cloud.irm.v1alpha2.Incident}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IIncident,
          | protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createIncident(request, options, callback);
  }
  getIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.IGetIncidentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.IGetIncidentRequest | undefined,
      {} | undefined
    ]
  >;
  getIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.IGetIncidentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.IGetIncidentRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Returns an incident by name.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Incident]{@link google.cloud.irm.v1alpha2.Incident}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.IGetIncidentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IIncident,
          protosTypes.google.cloud.irm.v1alpha2.IGetIncidentRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.IGetIncidentRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.IGetIncidentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.getIncident(request, options, callback);
  }
  updateIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateIncidentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateIncidentRequest | undefined,
      {} | undefined
    ]
  >;
  updateIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateIncidentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateIncidentRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates an existing incident.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.irm.v1alpha2.Incident} request.incident
   *   Required. The incident to update with the new values.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   List of fields that should be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Incident]{@link google.cloud.irm.v1alpha2.Incident}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateIncidentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IIncident,
          | protosTypes.google.cloud.irm.v1alpha2.IUpdateIncidentRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateIncidentRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncident,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateIncidentRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'incident.name': request.incident!.name || '',
    });
    return this._innerApiCalls.updateIncident(request, options, callback);
  }
  createAnnotation(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateAnnotationRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IAnnotation,
      (
        | protosTypes.google.cloud.irm.v1alpha2.ICreateAnnotationRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createAnnotation(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateAnnotationRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IAnnotation,
      | protosTypes.google.cloud.irm.v1alpha2.ICreateAnnotationRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates an annotation on an existing incident. Only 'text/plain' and
   * 'text/markdown' annotations can be created via this method.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {google.cloud.irm.v1alpha2.Annotation} request.annotation
   *   Required. Only annotation.content is an input argument.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Annotation]{@link google.cloud.irm.v1alpha2.Annotation}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createAnnotation(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateAnnotationRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IAnnotation,
          | protosTypes.google.cloud.irm.v1alpha2.ICreateAnnotationRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IAnnotation,
      | protosTypes.google.cloud.irm.v1alpha2.ICreateAnnotationRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IAnnotation,
      (
        | protosTypes.google.cloud.irm.v1alpha2.ICreateAnnotationRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createAnnotation(request, options, callback);
  }
  createTag(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateTagRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ITag,
      protosTypes.google.cloud.irm.v1alpha2.ICreateTagRequest | undefined,
      {} | undefined
    ]
  >;
  createTag(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateTagRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ITag,
      protosTypes.google.cloud.irm.v1alpha2.ICreateTagRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a tag on an existing incident.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {google.cloud.irm.v1alpha2.Tag} request.tag
   *   Required. Tag to create. Only tag.display_name is an input argument.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Tag]{@link google.cloud.irm.v1alpha2.Tag}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createTag(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateTagRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.ITag,
          protosTypes.google.cloud.irm.v1alpha2.ICreateTagRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ITag,
      protosTypes.google.cloud.irm.v1alpha2.ICreateTagRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ITag,
      protosTypes.google.cloud.irm.v1alpha2.ICreateTagRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createTag(request, options, callback);
  }
  deleteTag(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteTagRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.irm.v1alpha2.IDeleteTagRequest | undefined,
      {} | undefined
    ]
  >;
  deleteTag(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteTagRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.irm.v1alpha2.IDeleteTagRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes an existing tag.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the tag.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteTag(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteTagRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          protosTypes.google.cloud.irm.v1alpha2.IDeleteTagRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.irm.v1alpha2.IDeleteTagRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.irm.v1alpha2.IDeleteTagRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.deleteTag(request, options, callback);
  }
  createSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateSignalRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.ICreateSignalRequest | undefined,
      {} | undefined
    ]
  >;
  createSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateSignalRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.ICreateSignalRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a new signal.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the hosting Stackdriver project which requested
   *   signal belongs to.
   * @param {google.cloud.irm.v1alpha2.Signal} request.signal
   *   Required. The signal to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Signal]{@link google.cloud.irm.v1alpha2.Signal}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateSignalRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.ISignal,
          | protosTypes.google.cloud.irm.v1alpha2.ICreateSignalRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.ICreateSignalRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.ICreateSignalRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createSignal(request, options, callback);
  }
  lookupSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.ILookupSignalRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.ILookupSignalRequest | undefined,
      {} | undefined
    ]
  >;
  lookupSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.ILookupSignalRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.ILookupSignalRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Finds a signal by other unique IDs.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.csccFinding
   *   Required. Full resource name of the CSCC finding id this signal refers to (e.g.
   *   "organizations/abc/sources/123/findings/xyz")
   * @param {string} request.stackdriverNotificationId
   *   The ID from the Stackdriver Alerting notification.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Signal]{@link google.cloud.irm.v1alpha2.Signal}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  lookupSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.ILookupSignalRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.ISignal,
          | protosTypes.google.cloud.irm.v1alpha2.ILookupSignalRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.ILookupSignalRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.ILookupSignalRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    return this._innerApiCalls.lookupSignal(request, options, callback);
  }
  getSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.IGetSignalRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.IGetSignalRequest | undefined,
      {} | undefined
    ]
  >;
  getSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.IGetSignalRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.IGetSignalRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Returns a signal by name.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the Signal resource, for example,
   *   "projects/{project_id_or_number}/signals/{signal_id}".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Signal]{@link google.cloud.irm.v1alpha2.Signal}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.IGetSignalRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.ISignal,
          protosTypes.google.cloud.irm.v1alpha2.IGetSignalRequest | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.IGetSignalRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.IGetSignalRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.getSignal(request, options, callback);
  }
  updateSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateSignalRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateSignalRequest | undefined,
      {} | undefined
    ]
  >;
  updateSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateSignalRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateSignalRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates an existing signal (for example, to assign/unassign it to an
   * incident).
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.irm.v1alpha2.Signal} request.signal
   *   Required. The signal to update with the new values.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   List of fields that should be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Signal]{@link google.cloud.irm.v1alpha2.Signal}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateSignal(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateSignalRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.ISignal,
          | protosTypes.google.cloud.irm.v1alpha2.IUpdateSignalRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateSignalRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISignal,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateSignalRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'signal.name': request.signal!.name || '',
    });
    return this._innerApiCalls.updateSignal(request, options, callback);
  }
  escalateIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentResponse,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  escalateIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentResponse,
      | protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Escalates an incident.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.irm.v1alpha2.Incident} request.incident
   *   Required. The incident to escalate with the new values.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   List of fields that should be updated.
   * @param {number[]} request.subscriptions
   *   Subscriptions to add or update. Existing subscriptions with the same
   *   channel and address as a subscription in the list will be updated.
   * @param {number[]} request.tags
   *   Tags to add. Tags identical to existing tags will be ignored.
   * @param {number[]} request.roles
   *   Roles to add or update. Existing roles with the same type (and title, for
   *   TYPE_OTHER roles) will be updated.
   * @param {number[]} request.artifacts
   *   Artifacts to add. All artifacts are added without checking for duplicates.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [EscalateIncidentResponse]{@link google.cloud.irm.v1alpha2.EscalateIncidentResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  escalateIncident(
    request: protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentResponse,
          | protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentResponse,
      | protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentResponse,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IEscalateIncidentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'incident.name': request.incident!.name || '',
    });
    return this._innerApiCalls.escalateIncident(request, options, callback);
  }
  createArtifact(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateArtifactRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IArtifact,
      protosTypes.google.cloud.irm.v1alpha2.ICreateArtifactRequest | undefined,
      {} | undefined
    ]
  >;
  createArtifact(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateArtifactRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IArtifact,
      protosTypes.google.cloud.irm.v1alpha2.ICreateArtifactRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a new artifact.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {google.cloud.irm.v1alpha2.Artifact} request.artifact
   *   Required. The artifact to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Artifact]{@link google.cloud.irm.v1alpha2.Artifact}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createArtifact(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateArtifactRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IArtifact,
          | protosTypes.google.cloud.irm.v1alpha2.ICreateArtifactRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IArtifact,
      protosTypes.google.cloud.irm.v1alpha2.ICreateArtifactRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IArtifact,
      protosTypes.google.cloud.irm.v1alpha2.ICreateArtifactRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createArtifact(request, options, callback);
  }
  updateArtifact(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateArtifactRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IArtifact,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateArtifactRequest | undefined,
      {} | undefined
    ]
  >;
  updateArtifact(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateArtifactRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IArtifact,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateArtifactRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates an existing artifact.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.irm.v1alpha2.Artifact} request.artifact
   *   Required. The artifact to update with the new values.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   List of fields that should be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Artifact]{@link google.cloud.irm.v1alpha2.Artifact}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateArtifact(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateArtifactRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IArtifact,
          | protosTypes.google.cloud.irm.v1alpha2.IUpdateArtifactRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IArtifact,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateArtifactRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IArtifact,
      protosTypes.google.cloud.irm.v1alpha2.IUpdateArtifactRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'artifact.name': request.artifact!.name || '',
    });
    return this._innerApiCalls.updateArtifact(request, options, callback);
  }
  deleteArtifact(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteArtifactRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.irm.v1alpha2.IDeleteArtifactRequest | undefined,
      {} | undefined
    ]
  >;
  deleteArtifact(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteArtifactRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.irm.v1alpha2.IDeleteArtifactRequest | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes an existing artifact.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the artifact.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteArtifact(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteArtifactRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.irm.v1alpha2.IDeleteArtifactRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.irm.v1alpha2.IDeleteArtifactRequest | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      protosTypes.google.cloud.irm.v1alpha2.IDeleteArtifactRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.deleteArtifact(request, options, callback);
  }
  sendShiftHandoff(
    request: protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffResponse,
      (
        | protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  sendShiftHandoff(
    request: protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffResponse,
      | protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Sends a summary of the shift for oncall handoff.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the Stackdriver project that the handoff is being sent
   *   from. for example, `projects/{project_id_or_number}`
   * @param {string[]} request.recipients
   *   Required. Email addresses of the recipients of the handoff, for example,
   *   "user@example.com". Must contain at least one entry.
   * @param {string[]} [request.cc]
   *   Optional. Email addresses that should be CC'd on the handoff.
   * @param {string} request.subject
   *   Required. The subject of the email.
   * @param {string} request.notesContentType
   *   Content type string, for example, 'text/plain' or 'text/html'.
   * @param {string} [request.notesContent]
   *   Optional. Additional notes to be included in the handoff.
   * @param {number[]} [request.incidents]
   *   Optional. The set of incidents that should be included in the handoff.
   * @param {boolean} request.previewOnly
   *   If set to true a ShiftHandoffResponse will be returned but the handoff
   *   will not actually be sent.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [SendShiftHandoffResponse]{@link google.cloud.irm.v1alpha2.SendShiftHandoffResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  sendShiftHandoff(
    request: protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffResponse,
          | protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffResponse,
      | protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffResponse,
      (
        | protosTypes.google.cloud.irm.v1alpha2.ISendShiftHandoffRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.sendShiftHandoff(request, options, callback);
  }
  createSubscription(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateSubscriptionRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISubscription,
      (
        | protosTypes.google.cloud.irm.v1alpha2.ICreateSubscriptionRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createSubscription(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateSubscriptionRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISubscription,
      | protosTypes.google.cloud.irm.v1alpha2.ICreateSubscriptionRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a new subscription.
   * This will fail if:
   *    a. there are too many (50) subscriptions in the incident already
   *    b. a subscription using the given channel already exists
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {google.cloud.irm.v1alpha2.Subscription} request.subscription
   *   Required. The subscription to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Subscription]{@link google.cloud.irm.v1alpha2.Subscription}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createSubscription(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateSubscriptionRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.ISubscription,
          | protosTypes.google.cloud.irm.v1alpha2.ICreateSubscriptionRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISubscription,
      | protosTypes.google.cloud.irm.v1alpha2.ICreateSubscriptionRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISubscription,
      (
        | protosTypes.google.cloud.irm.v1alpha2.ICreateSubscriptionRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createSubscription(request, options, callback);
  }
  updateSubscription(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateSubscriptionRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISubscription,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IUpdateSubscriptionRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateSubscription(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateSubscriptionRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISubscription,
      | protosTypes.google.cloud.irm.v1alpha2.IUpdateSubscriptionRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Updates a subscription.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.irm.v1alpha2.Subscription} request.subscription
   *   Required. The subscription to update, with new values.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   List of fields that should be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Subscription]{@link google.cloud.irm.v1alpha2.Subscription}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateSubscription(
    request: protosTypes.google.cloud.irm.v1alpha2.IUpdateSubscriptionRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.ISubscription,
          | protosTypes.google.cloud.irm.v1alpha2.IUpdateSubscriptionRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISubscription,
      | protosTypes.google.cloud.irm.v1alpha2.IUpdateSubscriptionRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISubscription,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IUpdateSubscriptionRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'subscription.name': request.subscription!.name || '',
    });
    return this._innerApiCalls.updateSubscription(request, options, callback);
  }
  deleteSubscription(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteSubscriptionRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IDeleteSubscriptionRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteSubscription(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteSubscriptionRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.irm.v1alpha2.IDeleteSubscriptionRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes an existing subscription.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the subscription.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteSubscription(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteSubscriptionRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.irm.v1alpha2.IDeleteSubscriptionRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.irm.v1alpha2.IDeleteSubscriptionRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IDeleteSubscriptionRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.deleteSubscription(request, options, callback);
  }
  createIncidentRoleAssignment(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRoleAssignmentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      (
        | protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRoleAssignmentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createIncidentRoleAssignment(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRoleAssignmentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      | protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRoleAssignmentRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Creates a role assignment on an existing incident. Normally, the user field
   * will be set when assigning a role to oneself, and the next field will be
   * set when proposing another user as the assignee. Setting the next field
   * directly to a user other than oneself is equivalent to proposing and
   * force-assigning the role to the user.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {google.cloud.irm.v1alpha2.IncidentRoleAssignment} request.incidentRoleAssignment
   *   Required. Role assignment to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [IncidentRoleAssignment]{@link google.cloud.irm.v1alpha2.IncidentRoleAssignment}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createIncidentRoleAssignment(
    request: protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRoleAssignmentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
          | protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRoleAssignmentRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      | protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRoleAssignmentRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      (
        | protosTypes.google.cloud.irm.v1alpha2.ICreateIncidentRoleAssignmentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.createIncidentRoleAssignment(
      request,
      options,
      callback
    );
  }
  deleteIncidentRoleAssignment(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteIncidentRoleAssignmentRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IDeleteIncidentRoleAssignmentRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteIncidentRoleAssignment(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteIncidentRoleAssignmentRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.irm.v1alpha2.IDeleteIncidentRoleAssignmentRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Deletes an existing role assignment.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the role assignment.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteIncidentRoleAssignment(
    request: protosTypes.google.cloud.irm.v1alpha2.IDeleteIncidentRoleAssignmentRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.protobuf.IEmpty,
          | protosTypes.google.cloud.irm.v1alpha2.IDeleteIncidentRoleAssignmentRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.protobuf.IEmpty,
      | protosTypes.google.cloud.irm.v1alpha2.IDeleteIncidentRoleAssignmentRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.protobuf.IEmpty,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IDeleteIncidentRoleAssignmentRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.deleteIncidentRoleAssignment(
      request,
      options,
      callback
    );
  }
  requestIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.IRequestIncidentRoleHandoverRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IRequestIncidentRoleHandoverRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  requestIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.IRequestIncidentRoleHandoverRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      | protosTypes.google.cloud.irm.v1alpha2.IRequestIncidentRoleHandoverRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Starts a role handover. The proposed assignee will receive an email
   * notifying them of the assignment. This will fail if a role handover is
   * already pending.
   * Handover to an oncall ladder is not permitted. Use
   * CreateIncidentRoleAssignment instead.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the role assignment.
   * @param {google.cloud.irm.v1alpha2.User} request.newAssignee
   *   Required. The proposed assignee.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [IncidentRoleAssignment]{@link google.cloud.irm.v1alpha2.IncidentRoleAssignment}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  requestIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.IRequestIncidentRoleHandoverRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
          | protosTypes.google.cloud.irm.v1alpha2.IRequestIncidentRoleHandoverRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      | protosTypes.google.cloud.irm.v1alpha2.IRequestIncidentRoleHandoverRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IRequestIncidentRoleHandoverRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.requestIncidentRoleHandover(
      request,
      options,
      callback
    );
  }
  confirmIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.IConfirmIncidentRoleHandoverRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IConfirmIncidentRoleHandoverRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  confirmIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.IConfirmIncidentRoleHandoverRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      | protosTypes.google.cloud.irm.v1alpha2.IConfirmIncidentRoleHandoverRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Confirms a role handover. This will fail if the 'proposed_assignee' field
   * of the IncidentRoleAssignment is not equal to the 'new_assignee' field of
   * the request. If the caller is not the new_assignee,
   * ForceIncidentRoleHandover should be used instead.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the role assignment.
   * @param {google.cloud.irm.v1alpha2.User} request.newAssignee
   *   Required. The proposed assignee, who will now be the assignee. This should be the
   *   current user; otherwise ForceRoleHandover should be called.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [IncidentRoleAssignment]{@link google.cloud.irm.v1alpha2.IncidentRoleAssignment}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  confirmIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.IConfirmIncidentRoleHandoverRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
          | protosTypes.google.cloud.irm.v1alpha2.IConfirmIncidentRoleHandoverRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      | protosTypes.google.cloud.irm.v1alpha2.IConfirmIncidentRoleHandoverRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IConfirmIncidentRoleHandoverRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.confirmIncidentRoleHandover(
      request,
      options,
      callback
    );
  }
  forceIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.IForceIncidentRoleHandoverRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IForceIncidentRoleHandoverRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  forceIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.IForceIncidentRoleHandoverRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      | protosTypes.google.cloud.irm.v1alpha2.IForceIncidentRoleHandoverRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Forces a role handover. This will fail if the 'proposed_assignee' field of
   * the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
   * request. If the caller is the new_assignee, ConfirmIncidentRoleHandover
   * should be used instead.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the role assignment.
   * @param {google.cloud.irm.v1alpha2.User} request.newAssignee
   *   Required. The proposed assignee, who will now be the assignee. This should not be
   *   the current user; otherwise ConfirmRoleHandover should be called.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [IncidentRoleAssignment]{@link google.cloud.irm.v1alpha2.IncidentRoleAssignment}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  forceIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.IForceIncidentRoleHandoverRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
          | protosTypes.google.cloud.irm.v1alpha2.IForceIncidentRoleHandoverRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      | protosTypes.google.cloud.irm.v1alpha2.IForceIncidentRoleHandoverRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      (
        | protosTypes.google.cloud.irm.v1alpha2.IForceIncidentRoleHandoverRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.forceIncidentRoleHandover(
      request,
      options,
      callback
    );
  }
  cancelIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.ICancelIncidentRoleHandoverRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      (
        | protosTypes.google.cloud.irm.v1alpha2.ICancelIncidentRoleHandoverRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  cancelIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.ICancelIncidentRoleHandoverRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      | protosTypes.google.cloud.irm.v1alpha2.ICancelIncidentRoleHandoverRequest
      | undefined,
      {} | undefined
    >
  ): void;
  /**
   * Cancels a role handover. This will fail if the 'proposed_assignee' field of
   * the IncidentRoleAssignment is not equal to the 'new_assignee' field of the
   * request.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the role assignment.
   * @param {google.cloud.irm.v1alpha2.User} request.newAssignee
   *   Required. Person who was proposed as the next assignee (i.e.
   *   IncidentRoleAssignment.proposed_assignee) and whose proposal is being
   *   cancelled.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [IncidentRoleAssignment]{@link google.cloud.irm.v1alpha2.IncidentRoleAssignment}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  cancelIncidentRoleHandover(
    request: protosTypes.google.cloud.irm.v1alpha2.ICancelIncidentRoleHandoverRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
          | protosTypes.google.cloud.irm.v1alpha2.ICancelIncidentRoleHandoverRequest
          | undefined,
          {} | undefined
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      | protosTypes.google.cloud.irm.v1alpha2.ICancelIncidentRoleHandoverRequest
      | undefined,
      {} | undefined
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment,
      (
        | protosTypes.google.cloud.irm.v1alpha2.ICancelIncidentRoleHandoverRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.cancelIncidentRoleHandover(
      request,
      options,
      callback
    );
  }

  searchIncidents(
    request: protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncident[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsResponse
    ]
  >;
  searchIncidents(
    request: protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncident[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsResponse
    >
  ): void;
  /**
   * Returns a list of incidents.
   * Incidents are ordered by start time, with the most recent incidents first.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the hosting Stackdriver project which requested
   *   incidents belong to.
   * @param {string} request.query
   *   An expression that defines which incidents to return.
   *
   *   Search atoms can be used to match certain specific fields.  Otherwise,
   *   plain text will match text fields in the incident.
   *
   *   Search atoms:
   *   * `start` - (timestamp) The time the incident started.
   *   * `stage` - The stage of the incident, one of detected, triaged, mitigated,
   *     resolved, documented, or duplicate (which correspond to values in the
   *     Incident.Stage enum). These are ordered, so `stage<resolved` is
   *     equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
   *   * `severity` - (Incident.Severity) The severity of the incident.
   *      + Supports matching on a specific severity (for example,
   *      `severity:major`) or on a range (for example, `severity>medium`,
   *      `severity<=minor`, etc.).
   *
   *   Timestamp formats:
   *   * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
   *     In other words, the "<" operator will match dates before that date, the
   *     ">" operator will match dates after that date, and the ":" or "="
   *     operators will match the entire day.
   *   * Nd (for example, 7d) - a relative number of days ago, treated as a moment
   *     in time (as opposed to a day-wide span). A multiple of 24 hours ago (as
   *     opposed to calendar days).  In the case of daylight savings time, it will
   *     apply the current timezone to both ends of the range.  Note that exact
   *     matching (for example, `start:7d`) is unlikely to be useful because that
   *     would only match incidents created precisely at a particular instant in
   *     time.
   *
   *   Examples:
   *
   *   * `foo` - matches incidents containing the word "foo"
   *   * `"foo bar"` - matches incidents containing the phrase "foo bar"
   *   * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
   *     and "bar"
   *   * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
   *     "foo" but not the word "bar"
   *   * `foo OR bar` - matches incidents containing the word "foo" or the word
   *     "bar"
   *   * `start>2018-11-28` - matches incidents which started after November 11,
   *     2018.
   *   * `start<=2018-11-28` - matches incidents which started on or before
   *     November 11, 2018.
   *   * `start:2018-11-28` - matches incidents which started on November 11,
   *     2018.
   *   * `start>7d` - matches incidents which started after the point in time 7*24
   *     hours ago
   *   * `start>180d` - similar to 7d, but likely to cross the daylight savings
   *     time boundary, so the end time will be 1 hour different from "now."
   *   * `foo AND start>90d AND stage<resolved` - unresolved incidents from the
   *     past 90 days containing the word "foo"
   * @param {number} request.pageSize
   *   Number of incidents to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {string} request.timeZone
   *   The time zone name. It should be an IANA TZ name, such as
   *   "America/Los_Angeles". For more information,
   *   see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
   *   If no time zone is specified, the default is UTC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Incident]{@link google.cloud.irm.v1alpha2.Incident}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Incident]{@link google.cloud.irm.v1alpha2.Incident} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [SearchIncidentsRequest]{@link google.cloud.irm.v1alpha2.SearchIncidentsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [SearchIncidentsResponse]{@link google.cloud.irm.v1alpha2.SearchIncidentsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  searchIncidents(
    request: protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IIncident[],
          protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsRequest | null,
          protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncident[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncident[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.searchIncidents(request, options, callback);
  }

  /**
   * Equivalent to {@link searchIncidents}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link searchIncidents} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the hosting Stackdriver project which requested
   *   incidents belong to.
   * @param {string} request.query
   *   An expression that defines which incidents to return.
   *
   *   Search atoms can be used to match certain specific fields.  Otherwise,
   *   plain text will match text fields in the incident.
   *
   *   Search atoms:
   *   * `start` - (timestamp) The time the incident started.
   *   * `stage` - The stage of the incident, one of detected, triaged, mitigated,
   *     resolved, documented, or duplicate (which correspond to values in the
   *     Incident.Stage enum). These are ordered, so `stage<resolved` is
   *     equivalent to `stage:detected OR stage:triaged OR stage:mitigated`.
   *   * `severity` - (Incident.Severity) The severity of the incident.
   *      + Supports matching on a specific severity (for example,
   *      `severity:major`) or on a range (for example, `severity>medium`,
   *      `severity<=minor`, etc.).
   *
   *   Timestamp formats:
   *   * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
   *     In other words, the "<" operator will match dates before that date, the
   *     ">" operator will match dates after that date, and the ":" or "="
   *     operators will match the entire day.
   *   * Nd (for example, 7d) - a relative number of days ago, treated as a moment
   *     in time (as opposed to a day-wide span). A multiple of 24 hours ago (as
   *     opposed to calendar days).  In the case of daylight savings time, it will
   *     apply the current timezone to both ends of the range.  Note that exact
   *     matching (for example, `start:7d`) is unlikely to be useful because that
   *     would only match incidents created precisely at a particular instant in
   *     time.
   *
   *   Examples:
   *
   *   * `foo` - matches incidents containing the word "foo"
   *   * `"foo bar"` - matches incidents containing the phrase "foo bar"
   *   * `foo bar` or `foo AND bar` - matches incidents containing the words "foo"
   *     and "bar"
   *   * `foo -bar` or `foo AND NOT bar` - matches incidents containing the word
   *     "foo" but not the word "bar"
   *   * `foo OR bar` - matches incidents containing the word "foo" or the word
   *     "bar"
   *   * `start>2018-11-28` - matches incidents which started after November 11,
   *     2018.
   *   * `start<=2018-11-28` - matches incidents which started on or before
   *     November 11, 2018.
   *   * `start:2018-11-28` - matches incidents which started on November 11,
   *     2018.
   *   * `start>7d` - matches incidents which started after the point in time 7*24
   *     hours ago
   *   * `start>180d` - similar to 7d, but likely to cross the daylight savings
   *     time boundary, so the end time will be 1 hour different from "now."
   *   * `foo AND start>90d AND stage<resolved` - unresolved incidents from the
   *     past 90 days containing the word "foo"
   * @param {number} request.pageSize
   *   Number of incidents to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {string} request.timeZone
   *   The time zone name. It should be an IANA TZ name, such as
   *   "America/Los_Angeles". For more information,
   *   see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
   *   If no time zone is specified, the default is UTC.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Incident]{@link google.cloud.irm.v1alpha2.Incident} on 'data' event.
   */
  searchIncidentsStream(
    request?: protosTypes.google.cloud.irm.v1alpha2.ISearchIncidentsRequest,
    options?: gax.CallOptions | {}
  ): Transform {
    request = request || {};
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.searchIncidents.createStream(
      this._innerApiCalls.searchIncidents as gax.GaxCall,
      request,
      callSettings
    );
  }
  searchSimilarIncidents(
    request: protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.IResult[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsResponse
    ]
  >;
  searchSimilarIncidents(
    request: protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.IResult[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsResponse
    >
  ): void;
  /**
   * Returns a list of incidents that are "similar" to the specified incident
   * or signal. This functionality is provided on a best-effort basis and the
   * definition of "similar" is subject to change.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the incident or signal, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of similar incidents to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in 'next_page_token'.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Result]{@link google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Result]{@link google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [SearchSimilarIncidentsRequest]{@link google.cloud.irm.v1alpha2.SearchSimilarIncidentsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [SearchSimilarIncidentsResponse]{@link google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  searchSimilarIncidents(
    request: protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.IResult[],
          protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsRequest | null,
          protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.IResult[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.IResult[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    return this._innerApiCalls.searchSimilarIncidents(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to {@link searchSimilarIncidents}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link searchSimilarIncidents} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Resource name of the incident or signal, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of similar incidents to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in 'next_page_token'.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Result]{@link google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result} on 'data' event.
   */
  searchSimilarIncidentsStream(
    request?: protosTypes.google.cloud.irm.v1alpha2.ISearchSimilarIncidentsRequest,
    options?: gax.CallOptions | {}
  ): Transform {
    request = request || {};
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.searchSimilarIncidents.createStream(
      this._innerApiCalls.searchSimilarIncidents as gax.GaxCall,
      request,
      callSettings
    );
  }
  listAnnotations(
    request: protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IAnnotation[],
      protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsResponse
    ]
  >;
  listAnnotations(
    request: protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IAnnotation[],
      protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsResponse
    >
  ): void;
  /**
   * Lists annotations that are part of an incident. No assumptions should be
   * made on the content-type of the annotation returned.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of annotations to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Annotation]{@link google.cloud.irm.v1alpha2.Annotation}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Annotation]{@link google.cloud.irm.v1alpha2.Annotation} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListAnnotationsRequest]{@link google.cloud.irm.v1alpha2.ListAnnotationsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListAnnotationsResponse]{@link google.cloud.irm.v1alpha2.ListAnnotationsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listAnnotations(
    request: protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IAnnotation[],
          protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsRequest | null,
          protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IAnnotation[],
      protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IAnnotation[],
      protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.listAnnotations(request, options, callback);
  }

  /**
   * Equivalent to {@link listAnnotations}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listAnnotations} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of annotations to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Annotation]{@link google.cloud.irm.v1alpha2.Annotation} on 'data' event.
   */
  listAnnotationsStream(
    request?: protosTypes.google.cloud.irm.v1alpha2.IListAnnotationsRequest,
    options?: gax.CallOptions | {}
  ): Transform {
    request = request || {};
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listAnnotations.createStream(
      this._innerApiCalls.listAnnotations as gax.GaxCall,
      request,
      callSettings
    );
  }
  listTags(
    request: protosTypes.google.cloud.irm.v1alpha2.IListTagsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ITag[],
      protosTypes.google.cloud.irm.v1alpha2.IListTagsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListTagsResponse
    ]
  >;
  listTags(
    request: protosTypes.google.cloud.irm.v1alpha2.IListTagsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ITag[],
      protosTypes.google.cloud.irm.v1alpha2.IListTagsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListTagsResponse
    >
  ): void;
  /**
   * Lists tags that are part of an incident.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of tags to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Tag]{@link google.cloud.irm.v1alpha2.Tag}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Tag]{@link google.cloud.irm.v1alpha2.Tag} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListTagsRequest]{@link google.cloud.irm.v1alpha2.ListTagsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListTagsResponse]{@link google.cloud.irm.v1alpha2.ListTagsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listTags(
    request: protosTypes.google.cloud.irm.v1alpha2.IListTagsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.ITag[],
          protosTypes.google.cloud.irm.v1alpha2.IListTagsRequest | null,
          protosTypes.google.cloud.irm.v1alpha2.IListTagsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ITag[],
      protosTypes.google.cloud.irm.v1alpha2.IListTagsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListTagsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ITag[],
      protosTypes.google.cloud.irm.v1alpha2.IListTagsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListTagsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.listTags(request, options, callback);
  }

  /**
   * Equivalent to {@link listTags}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listTags} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of tags to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Tag]{@link google.cloud.irm.v1alpha2.Tag} on 'data' event.
   */
  listTagsStream(
    request?: protosTypes.google.cloud.irm.v1alpha2.IListTagsRequest,
    options?: gax.CallOptions | {}
  ): Transform {
    request = request || {};
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listTags.createStream(
      this._innerApiCalls.listTags as gax.GaxCall,
      request,
      callSettings
    );
  }
  searchSignals(
    request: protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISignal[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsResponse
    ]
  >;
  searchSignals(
    request: protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISignal[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsResponse
    >
  ): void;
  /**
   * Lists signals that are part of an incident.
   * Signals are returned in reverse chronological order.
   * Note that search should not be relied on for critical functionality.  It
   * has lower availability guarantees and might fail to return valid results.
   * Returned results might include stale or extraneous entries.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the hosting Stackdriver project which requested
   *   incidents belong to.
   * @param {string} request.query
   *   An expression that defines which signals to return.
   *
   *   Search atoms can be used to match certain specific fields.  Otherwise,
   *   plain text will match text fields in the signal.
   *
   *   Search atoms:
   *
   *   * `start` - (timestamp) The time the signal was created.
   *   * `title` - The title of the signal.
   *   * `signal_state` - `open` or `closed`. State of the signal.
   *     (e.g., `signal_state:open`)
   *
   *   Timestamp formats:
   *
   *   * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
   *     In other words, the "<" operator will match dates before that date, the
   *     ">" operator will match dates after that date, and the ":" operator will
   *     match the entire day.
   *   * yyyy-MM-ddTHH:mm - Same as above, but with minute resolution.
   *   * yyyy-MM-ddTHH:mm:ss - Same as above, but with second resolution.
   *   * Nd (e.g. 7d) - a relative number of days ago, treated as a moment in time
   *     (as opposed to a day-wide span) a multiple of 24 hours ago (as opposed to
   *     calendar days).  In the case of daylight savings time, it will apply the
   *     current timezone to both ends of the range.  Note that exact matching
   *     (e.g. `start:7d`) is unlikely to be useful because that would only match
   *     signals created precisely at a particular instant in time.
   *
   *   The absolute timestamp formats (everything starting with a year) can
   *   optionally be followed with a UTC offset in +/-hh:mm format.  Also, the 'T'
   *   separating dates and times can optionally be replaced with a space. Note
   *   that any timestamp containing a space or colon will need to be quoted.
   *
   *   Examples:
   *
   *   * `foo` - matches signals containing the word "foo"
   *   * `"foo bar"` - matches signals containing the phrase "foo bar"
   *   * `foo bar` or `foo AND bar` - matches signals containing the words
   *     "foo" and "bar"
   *   * `foo -bar` or `foo AND NOT bar` - matches signals containing the
   *     word
   *     "foo" but not the word "bar"
   *   * `foo OR bar` - matches signals containing the word "foo" or the
   *     word "bar"
   *   * `start>2018-11-28` - matches signals which started after November
   *     11, 2018.
   *   * `start<=2018-11-28` - matches signals which started on or before
   *     November 11, 2018.
   *   * `start:2018-11-28` - matches signals which started on November 11,
   *     2018.
   *   * `start>"2018-11-28 01:02:03+04:00"` - matches signals which started
   *     after November 11, 2018 at 1:02:03 AM according to the UTC+04 time
   *     zone.
   *   * `start>7d` - matches signals which started after the point in time
   *     7*24 hours ago
   *   * `start>180d` - similar to 7d, but likely to cross the daylight savings
   *     time boundary, so the end time will be 1 hour different from "now."
   *   * `foo AND start>90d AND stage<resolved` - unresolved signals from
   *     the past 90 days containing the word "foo"
   * @param {number} request.pageSize
   *   Maximum number of `signals` to return in the response.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`. All
   *   field values except for page_size and page_token should be the same as the
   *   original query (may return an error or unexpected data otherwise).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Signal]{@link google.cloud.irm.v1alpha2.Signal}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Signal]{@link google.cloud.irm.v1alpha2.Signal} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [SearchSignalsRequest]{@link google.cloud.irm.v1alpha2.SearchSignalsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [SearchSignalsResponse]{@link google.cloud.irm.v1alpha2.SearchSignalsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  searchSignals(
    request: protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.ISignal[],
          protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsRequest | null,
          protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISignal[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISignal[],
      protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.searchSignals(request, options, callback);
  }

  /**
   * Equivalent to {@link searchSignals}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link searchSignals} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The resource name of the hosting Stackdriver project which requested
   *   incidents belong to.
   * @param {string} request.query
   *   An expression that defines which signals to return.
   *
   *   Search atoms can be used to match certain specific fields.  Otherwise,
   *   plain text will match text fields in the signal.
   *
   *   Search atoms:
   *
   *   * `start` - (timestamp) The time the signal was created.
   *   * `title` - The title of the signal.
   *   * `signal_state` - `open` or `closed`. State of the signal.
   *     (e.g., `signal_state:open`)
   *
   *   Timestamp formats:
   *
   *   * yyyy-MM-dd - an absolute date, treated as a calendar-day-wide window.
   *     In other words, the "<" operator will match dates before that date, the
   *     ">" operator will match dates after that date, and the ":" operator will
   *     match the entire day.
   *   * yyyy-MM-ddTHH:mm - Same as above, but with minute resolution.
   *   * yyyy-MM-ddTHH:mm:ss - Same as above, but with second resolution.
   *   * Nd (e.g. 7d) - a relative number of days ago, treated as a moment in time
   *     (as opposed to a day-wide span) a multiple of 24 hours ago (as opposed to
   *     calendar days).  In the case of daylight savings time, it will apply the
   *     current timezone to both ends of the range.  Note that exact matching
   *     (e.g. `start:7d`) is unlikely to be useful because that would only match
   *     signals created precisely at a particular instant in time.
   *
   *   The absolute timestamp formats (everything starting with a year) can
   *   optionally be followed with a UTC offset in +/-hh:mm format.  Also, the 'T'
   *   separating dates and times can optionally be replaced with a space. Note
   *   that any timestamp containing a space or colon will need to be quoted.
   *
   *   Examples:
   *
   *   * `foo` - matches signals containing the word "foo"
   *   * `"foo bar"` - matches signals containing the phrase "foo bar"
   *   * `foo bar` or `foo AND bar` - matches signals containing the words
   *     "foo" and "bar"
   *   * `foo -bar` or `foo AND NOT bar` - matches signals containing the
   *     word
   *     "foo" but not the word "bar"
   *   * `foo OR bar` - matches signals containing the word "foo" or the
   *     word "bar"
   *   * `start>2018-11-28` - matches signals which started after November
   *     11, 2018.
   *   * `start<=2018-11-28` - matches signals which started on or before
   *     November 11, 2018.
   *   * `start:2018-11-28` - matches signals which started on November 11,
   *     2018.
   *   * `start>"2018-11-28 01:02:03+04:00"` - matches signals which started
   *     after November 11, 2018 at 1:02:03 AM according to the UTC+04 time
   *     zone.
   *   * `start>7d` - matches signals which started after the point in time
   *     7*24 hours ago
   *   * `start>180d` - similar to 7d, but likely to cross the daylight savings
   *     time boundary, so the end time will be 1 hour different from "now."
   *   * `foo AND start>90d AND stage<resolved` - unresolved signals from
   *     the past 90 days containing the word "foo"
   * @param {number} request.pageSize
   *   Maximum number of `signals` to return in the response.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`. All
   *   field values except for page_size and page_token should be the same as the
   *   original query (may return an error or unexpected data otherwise).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Signal]{@link google.cloud.irm.v1alpha2.Signal} on 'data' event.
   */
  searchSignalsStream(
    request?: protosTypes.google.cloud.irm.v1alpha2.ISearchSignalsRequest,
    options?: gax.CallOptions | {}
  ): Transform {
    request = request || {};
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.searchSignals.createStream(
      this._innerApiCalls.searchSignals as gax.GaxCall,
      request,
      callSettings
    );
  }
  listArtifacts(
    request: protosTypes.google.cloud.irm.v1alpha2.IListArtifactsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IArtifact[],
      protosTypes.google.cloud.irm.v1alpha2.IListArtifactsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListArtifactsResponse
    ]
  >;
  listArtifacts(
    request: protosTypes.google.cloud.irm.v1alpha2.IListArtifactsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IArtifact[],
      protosTypes.google.cloud.irm.v1alpha2.IListArtifactsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListArtifactsResponse
    >
  ): void;
  /**
   * Returns a list of artifacts for an incident.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of artifacts to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Artifact]{@link google.cloud.irm.v1alpha2.Artifact}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Artifact]{@link google.cloud.irm.v1alpha2.Artifact} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListArtifactsRequest]{@link google.cloud.irm.v1alpha2.ListArtifactsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListArtifactsResponse]{@link google.cloud.irm.v1alpha2.ListArtifactsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listArtifacts(
    request: protosTypes.google.cloud.irm.v1alpha2.IListArtifactsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IArtifact[],
          protosTypes.google.cloud.irm.v1alpha2.IListArtifactsRequest | null,
          protosTypes.google.cloud.irm.v1alpha2.IListArtifactsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IArtifact[],
      protosTypes.google.cloud.irm.v1alpha2.IListArtifactsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListArtifactsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IArtifact[],
      protosTypes.google.cloud.irm.v1alpha2.IListArtifactsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListArtifactsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.listArtifacts(request, options, callback);
  }

  /**
   * Equivalent to {@link listArtifacts}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listArtifacts} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of artifacts to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Artifact]{@link google.cloud.irm.v1alpha2.Artifact} on 'data' event.
   */
  listArtifactsStream(
    request?: protosTypes.google.cloud.irm.v1alpha2.IListArtifactsRequest,
    options?: gax.CallOptions | {}
  ): Transform {
    request = request || {};
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listArtifacts.createStream(
      this._innerApiCalls.listArtifacts as gax.GaxCall,
      request,
      callSettings
    );
  }
  listSubscriptions(
    request: protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISubscription[],
      protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsResponse
    ]
  >;
  listSubscriptions(
    request: protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISubscription[],
      protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsResponse
    >
  ): void;
  /**
   * Returns a list of subscriptions for an incident.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of subscriptions to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Subscription]{@link google.cloud.irm.v1alpha2.Subscription}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Subscription]{@link google.cloud.irm.v1alpha2.Subscription} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListSubscriptionsRequest]{@link google.cloud.irm.v1alpha2.ListSubscriptionsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListSubscriptionsResponse]{@link google.cloud.irm.v1alpha2.ListSubscriptionsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listSubscriptions(
    request: protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.ISubscription[],
          protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsRequest | null,
          protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.ISubscription[],
      protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.ISubscription[],
      protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.listSubscriptions(request, options, callback);
  }

  /**
   * Equivalent to {@link listSubscriptions}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listSubscriptions} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of subscriptions to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Subscription]{@link google.cloud.irm.v1alpha2.Subscription} on 'data' event.
   */
  listSubscriptionsStream(
    request?: protosTypes.google.cloud.irm.v1alpha2.IListSubscriptionsRequest,
    options?: gax.CallOptions | {}
  ): Transform {
    request = request || {};
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listSubscriptions.createStream(
      this._innerApiCalls.listSubscriptions as gax.GaxCall,
      request,
      callSettings
    );
  }
  listIncidentRoleAssignments(
    request: protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment[],
      protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsResponse
    ]
  >;
  listIncidentRoleAssignments(
    request: protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment[],
      protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsResponse
    >
  ): void;
  /**
   * Lists role assignments that are part of an incident.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of assignments to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [IncidentRoleAssignment]{@link google.cloud.irm.v1alpha2.IncidentRoleAssignment}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [IncidentRoleAssignment]{@link google.cloud.irm.v1alpha2.IncidentRoleAssignment} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListIncidentRoleAssignmentsRequest]{@link google.cloud.irm.v1alpha2.ListIncidentRoleAssignmentsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListIncidentRoleAssignmentsResponse]{@link google.cloud.irm.v1alpha2.ListIncidentRoleAssignmentsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listIncidentRoleAssignments(
    request: protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment[],
          protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsRequest | null,
          protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsResponse
        >,
    callback?: Callback<
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment[],
      protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsResponse
    >
  ): Promise<
    [
      protosTypes.google.cloud.irm.v1alpha2.IIncidentRoleAssignment[],
      protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsRequest | null,
      protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    return this._innerApiCalls.listIncidentRoleAssignments(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to {@link listIncidentRoleAssignments}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listIncidentRoleAssignments} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Resource name of the incident, for example,
   *   "projects/{project_id_or_number}/incidents/{incident_id}".
   * @param {number} request.pageSize
   *   Number of assignments to return.
   * @param {string} request.pageToken
   *   Page token from an earlier query, as returned in `next_page_token`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [IncidentRoleAssignment]{@link google.cloud.irm.v1alpha2.IncidentRoleAssignment} on 'data' event.
   */
  listIncidentRoleAssignmentsStream(
    request?: protosTypes.google.cloud.irm.v1alpha2.IListIncidentRoleAssignmentsRequest,
    options?: gax.CallOptions | {}
  ): Transform {
    request = request || {};
    const callSettings = new gax.CallSettings(options);
    return this._descriptors.page.listIncidentRoleAssignments.createStream(
      this._innerApiCalls.listIncidentRoleAssignments as gax.GaxCall,
      request,
      callSettings
    );
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project: string) {
    return this._pathTemplates.projectPathTemplate.render({
      project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this._pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified incident resource name string.
   *
   * @param {string} project
   * @param {string} incident
   * @returns {string} Resource name string.
   */
  incidentPath(project: string, incident: string) {
    return this._pathTemplates.incidentPathTemplate.render({
      project,
      incident,
    });
  }

  /**
   * Parse the project from Incident resource.
   *
   * @param {string} incidentName
   *   A fully-qualified path representing Incident resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromIncidentName(incidentName: string) {
    return this._pathTemplates.incidentPathTemplate.match(incidentName).project;
  }

  /**
   * Parse the incident from Incident resource.
   *
   * @param {string} incidentName
   *   A fully-qualified path representing Incident resource.
   * @returns {string} A string representing the incident.
   */
  matchIncidentFromIncidentName(incidentName: string) {
    return this._pathTemplates.incidentPathTemplate.match(incidentName)
      .incident;
  }

  /**
   * Return a fully-qualified tag resource name string.
   *
   * @param {string} project
   * @param {string} incident
   * @param {string} tag
   * @returns {string} Resource name string.
   */
  tagPath(project: string, incident: string, tag: string) {
    return this._pathTemplates.tagPathTemplate.render({
      project,
      incident,
      tag,
    });
  }

  /**
   * Parse the project from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTagName(tagName: string) {
    return this._pathTemplates.tagPathTemplate.match(tagName).project;
  }

  /**
   * Parse the incident from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the incident.
   */
  matchIncidentFromTagName(tagName: string) {
    return this._pathTemplates.tagPathTemplate.match(tagName).incident;
  }

  /**
   * Parse the tag from Tag resource.
   *
   * @param {string} tagName
   *   A fully-qualified path representing Tag resource.
   * @returns {string} A string representing the tag.
   */
  matchTagFromTagName(tagName: string) {
    return this._pathTemplates.tagPathTemplate.match(tagName).tag;
  }

  /**
   * Return a fully-qualified signal resource name string.
   *
   * @param {string} project
   * @param {string} signal
   * @returns {string} Resource name string.
   */
  signalPath(project: string, signal: string) {
    return this._pathTemplates.signalPathTemplate.render({
      project,
      signal,
    });
  }

  /**
   * Parse the project from Signal resource.
   *
   * @param {string} signalName
   *   A fully-qualified path representing Signal resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSignalName(signalName: string) {
    return this._pathTemplates.signalPathTemplate.match(signalName).project;
  }

  /**
   * Parse the signal from Signal resource.
   *
   * @param {string} signalName
   *   A fully-qualified path representing Signal resource.
   * @returns {string} A string representing the signal.
   */
  matchSignalFromSignalName(signalName: string) {
    return this._pathTemplates.signalPathTemplate.match(signalName).signal;
  }

  /**
   * Return a fully-qualified artifact resource name string.
   *
   * @param {string} project
   * @param {string} incident
   * @param {string} artifact
   * @returns {string} Resource name string.
   */
  artifactPath(project: string, incident: string, artifact: string) {
    return this._pathTemplates.artifactPathTemplate.render({
      project,
      incident,
      artifact,
    });
  }

  /**
   * Parse the project from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromArtifactName(artifactName: string) {
    return this._pathTemplates.artifactPathTemplate.match(artifactName).project;
  }

  /**
   * Parse the incident from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the incident.
   */
  matchIncidentFromArtifactName(artifactName: string) {
    return this._pathTemplates.artifactPathTemplate.match(artifactName)
      .incident;
  }

  /**
   * Parse the artifact from Artifact resource.
   *
   * @param {string} artifactName
   *   A fully-qualified path representing Artifact resource.
   * @returns {string} A string representing the artifact.
   */
  matchArtifactFromArtifactName(artifactName: string) {
    return this._pathTemplates.artifactPathTemplate.match(artifactName)
      .artifact;
  }

  /**
   * Return a fully-qualified subscription resource name string.
   *
   * @param {string} project
   * @param {string} incident
   * @param {string} subscription
   * @returns {string} Resource name string.
   */
  subscriptionPath(project: string, incident: string, subscription: string) {
    return this._pathTemplates.subscriptionPathTemplate.render({
      project,
      incident,
      subscription,
    });
  }

  /**
   * Parse the project from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSubscriptionName(subscriptionName: string) {
    return this._pathTemplates.subscriptionPathTemplate.match(subscriptionName)
      .project;
  }

  /**
   * Parse the incident from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the incident.
   */
  matchIncidentFromSubscriptionName(subscriptionName: string) {
    return this._pathTemplates.subscriptionPathTemplate.match(subscriptionName)
      .incident;
  }

  /**
   * Parse the subscription from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the subscription.
   */
  matchSubscriptionFromSubscriptionName(subscriptionName: string) {
    return this._pathTemplates.subscriptionPathTemplate.match(subscriptionName)
      .subscription;
  }

  /**
   * Return a fully-qualified incidentroleassignment resource name string.
   *
   * @param {string} project_id_or_number
   * @param {string} incident_id
   * @param {string} role_id
   * @returns {string} Resource name string.
   */
  incidentRoleAssignmentPath(
    projectIdOrNumber: string,
    incidentId: string,
    roleId: string
  ) {
    return this._pathTemplates.incidentroleassignmentPathTemplate.render({
      project_id_or_number: projectIdOrNumber,
      incident_id: incidentId,
      role_id: roleId,
    });
  }

  /**
   * Parse the project_id_or_number from IncidentRoleAssignment resource.
   *
   * @param {string} incidentroleassignmentName
   *   A fully-qualified path representing IncidentRoleAssignment resource.
   * @returns {string} A string representing the project_id_or_number.
   */
  matchProject_id_or_numberFromIncidentRoleAssignmentName(
    incidentroleassignmentName: string
  ) {
    return this._pathTemplates.incidentroleassignmentPathTemplate.match(
      incidentroleassignmentName
    ).project_id_or_number;
  }

  /**
   * Parse the incident_id from IncidentRoleAssignment resource.
   *
   * @param {string} incidentroleassignmentName
   *   A fully-qualified path representing IncidentRoleAssignment resource.
   * @returns {string} A string representing the incident_id.
   */
  matchIncident_idFromIncidentRoleAssignmentName(
    incidentroleassignmentName: string
  ) {
    return this._pathTemplates.incidentroleassignmentPathTemplate.match(
      incidentroleassignmentName
    ).incident_id;
  }

  /**
   * Parse the role_id from IncidentRoleAssignment resource.
   *
   * @param {string} incidentroleassignmentName
   *   A fully-qualified path representing IncidentRoleAssignment resource.
   * @returns {string} A string representing the role_id.
   */
  matchRole_idFromIncidentRoleAssignmentName(
    incidentroleassignmentName: string
  ) {
    return this._pathTemplates.incidentroleassignmentPathTemplate.match(
      incidentroleassignmentName
    ).role_id;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    if (!this._terminated) {
      return this.incidentServiceStub.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
