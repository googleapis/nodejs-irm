// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as incidentserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
  const filledObject = (instance.constructor as typeof protobuf.Message).toObject(
    instance as protobuf.Message<T>,
    {defaults: true}
  );
  return (instance.constructor as typeof protobuf.Message).fromObject(
    filledObject
  ) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
  return error
    ? sinon.stub().rejects(error)
    : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(
  response?: ResponseType,
  error?: Error
) {
  return error
    ? sinon.stub().callsArgWith(2, error)
    : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  const pagingStub = sinon.stub();
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
    }
  }
  const transformStub = error
    ? sinon.stub().callsArgWith(2, error)
    : pagingStub;
  const mockStream = new PassThrough({
    objectMode: true,
    transform: transformStub,
  });
  // trigger as many responses as needed
  if (responses) {
    for (let i = 0; i < responses.length; ++i) {
      setImmediate(() => {
        mockStream.write({});
      });
    }
    setImmediate(() => {
      mockStream.end();
    });
  } else {
    setImmediate(() => {
      mockStream.write({});
    });
    setImmediate(() => {
      mockStream.end();
    });
  }
  return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(
  responses?: ResponseType[],
  error?: Error
) {
  let counter = 0;
  const asyncIterable = {
    [Symbol.asyncIterator]() {
      return {
        async next() {
          if (error) {
            return Promise.reject(error);
          }
          if (counter >= responses!.length) {
            return Promise.resolve({done: true, value: undefined});
          }
          return Promise.resolve({done: false, value: responses![counter++]});
        },
      };
    },
  };
  return sinon.stub().returns(asyncIterable);
}

describe('v1alpha2.IncidentServiceClient', () => {
  it('has servicePath', () => {
    const servicePath =
      incidentserviceModule.v1alpha2.IncidentServiceClient.servicePath;
    assert(servicePath);
  });

  it('has apiEndpoint', () => {
    const apiEndpoint =
      incidentserviceModule.v1alpha2.IncidentServiceClient.apiEndpoint;
    assert(apiEndpoint);
  });

  it('has port', () => {
    const port = incidentserviceModule.v1alpha2.IncidentServiceClient.port;
    assert(port);
    assert(typeof port === 'number');
  });

  it('should create a client with no option', () => {
    const client = new incidentserviceModule.v1alpha2.IncidentServiceClient();
    assert(client);
  });

  it('should create a client with gRPC fallback', () => {
    const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
      fallback: true,
    });
    assert(client);
  });

  it('has initialize method and supports deferred initialization', async () => {
    const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    assert.strictEqual(client.incidentServiceStub, undefined);
    await client.initialize();
    assert(client.incidentServiceStub);
  });

  it('has close method', () => {
    const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.close();
  });

  it('has getProjectId method', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
    const result = await client.getProjectId();
    assert.strictEqual(result, fakeProjectId);
    assert((client.auth.getProjectId as SinonStub).calledWithExactly());
  });

  it('has getProjectId method with callback', async () => {
    const fakeProjectId = 'fake-project-id';
    const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    client.auth.getProjectId = sinon
      .stub()
      .callsArgWith(0, null, fakeProjectId);
    const promise = new Promise((resolve, reject) => {
      client.getProjectId((err?: Error | null, projectId?: string | null) => {
        if (err) {
          reject(err);
        } else {
          resolve(projectId);
        }
      });
    });
    const result = await promise;
    assert.strictEqual(result, fakeProjectId);
  });

  describe('createIncident', () => {
    it('invokes createIncident without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateIncidentRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Incident()
      );
      client.innerApiCalls.createIncident = stubSimpleCall(expectedResponse);
      const [response] = await client.createIncident(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createIncident without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateIncidentRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Incident()
      );
      client.innerApiCalls.createIncident = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.createIncident(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IIncident | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createIncident with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateIncidentRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createIncident = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.createIncident(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.createIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('getIncident', () => {
    it('invokes getIncident without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.GetIncidentRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Incident()
      );
      client.innerApiCalls.getIncident = stubSimpleCall(expectedResponse);
      const [response] = await client.getIncident(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getIncident without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.GetIncidentRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Incident()
      );
      client.innerApiCalls.getIncident = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.getIncident(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IIncident | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getIncident with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.GetIncidentRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getIncident = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.getIncident(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.getIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('updateIncident', () => {
    it('invokes updateIncident without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateIncidentRequest()
      );
      request.incident = {};
      request.incident.name = '';
      const expectedHeaderRequestParams = 'incident.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Incident()
      );
      client.innerApiCalls.updateIncident = stubSimpleCall(expectedResponse);
      const [response] = await client.updateIncident(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateIncident without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateIncidentRequest()
      );
      request.incident = {};
      request.incident.name = '';
      const expectedHeaderRequestParams = 'incident.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Incident()
      );
      client.innerApiCalls.updateIncident = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.updateIncident(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IIncident | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateIncident with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateIncidentRequest()
      );
      request.incident = {};
      request.incident.name = '';
      const expectedHeaderRequestParams = 'incident.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateIncident = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.updateIncident(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.updateIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('createAnnotation', () => {
    it('invokes createAnnotation without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateAnnotationRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Annotation()
      );
      client.innerApiCalls.createAnnotation = stubSimpleCall(expectedResponse);
      const [response] = await client.createAnnotation(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createAnnotation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createAnnotation without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateAnnotationRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Annotation()
      );
      client.innerApiCalls.createAnnotation = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.createAnnotation(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IAnnotation | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createAnnotation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createAnnotation with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateAnnotationRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createAnnotation = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.createAnnotation(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.createAnnotation as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('createTag', () => {
    it('invokes createTag without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateTagRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Tag()
      );
      client.innerApiCalls.createTag = stubSimpleCall(expectedResponse);
      const [response] = await client.createTag(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createTag without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateTagRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Tag()
      );
      client.innerApiCalls.createTag = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.createTag(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.ITag | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createTag with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateTagRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createTag = stubSimpleCall(undefined, expectedError);
      assert.rejects(async () => {
        await client.createTag(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.createTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('deleteTag', () => {
    it('invokes deleteTag without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteTagRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTag = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteTag(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteTag without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteTagRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteTag = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.deleteTag(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteTag with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteTagRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteTag = stubSimpleCall(undefined, expectedError);
      assert.rejects(async () => {
        await client.deleteTag(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.deleteTag as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('createSignal', () => {
    it('invokes createSignal without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateSignalRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Signal()
      );
      client.innerApiCalls.createSignal = stubSimpleCall(expectedResponse);
      const [response] = await client.createSignal(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createSignal without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateSignalRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Signal()
      );
      client.innerApiCalls.createSignal = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.createSignal(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.ISignal | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createSignal with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateSignalRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createSignal = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.createSignal(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.createSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('lookupSignal', () => {
    it('invokes lookupSignal without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.LookupSignalRequest()
      );
      const expectedOptions = {};
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Signal()
      );
      client.innerApiCalls.lookupSignal = stubSimpleCall(expectedResponse);
      const [response] = await client.lookupSignal(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.lookupSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes lookupSignal without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.LookupSignalRequest()
      );
      const expectedOptions = {};
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Signal()
      );
      client.innerApiCalls.lookupSignal = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.lookupSignal(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.ISignal | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.lookupSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes lookupSignal with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.LookupSignalRequest()
      );
      const expectedOptions = {};
      const expectedError = new Error('expected');
      client.innerApiCalls.lookupSignal = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.lookupSignal(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.lookupSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('getSignal', () => {
    it('invokes getSignal without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.GetSignalRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Signal()
      );
      client.innerApiCalls.getSignal = stubSimpleCall(expectedResponse);
      const [response] = await client.getSignal(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes getSignal without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.GetSignalRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Signal()
      );
      client.innerApiCalls.getSignal = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.getSignal(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.ISignal | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.getSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes getSignal with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.GetSignalRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.getSignal = stubSimpleCall(undefined, expectedError);
      assert.rejects(async () => {
        await client.getSignal(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.getSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('updateSignal', () => {
    it('invokes updateSignal without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateSignalRequest()
      );
      request.signal = {};
      request.signal.name = '';
      const expectedHeaderRequestParams = 'signal.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Signal()
      );
      client.innerApiCalls.updateSignal = stubSimpleCall(expectedResponse);
      const [response] = await client.updateSignal(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateSignal without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateSignalRequest()
      );
      request.signal = {};
      request.signal.name = '';
      const expectedHeaderRequestParams = 'signal.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Signal()
      );
      client.innerApiCalls.updateSignal = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.updateSignal(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.ISignal | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateSignal with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateSignalRequest()
      );
      request.signal = {};
      request.signal.name = '';
      const expectedHeaderRequestParams = 'signal.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSignal = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.updateSignal(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.updateSignal as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('escalateIncident', () => {
    it('invokes escalateIncident without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.EscalateIncidentRequest()
      );
      request.incident = {};
      request.incident.name = '';
      const expectedHeaderRequestParams = 'incident.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.EscalateIncidentResponse()
      );
      client.innerApiCalls.escalateIncident = stubSimpleCall(expectedResponse);
      const [response] = await client.escalateIncident(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.escalateIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes escalateIncident without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.EscalateIncidentRequest()
      );
      request.incident = {};
      request.incident.name = '';
      const expectedHeaderRequestParams = 'incident.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.EscalateIncidentResponse()
      );
      client.innerApiCalls.escalateIncident = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.escalateIncident(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IEscalateIncidentResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.escalateIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes escalateIncident with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.EscalateIncidentRequest()
      );
      request.incident = {};
      request.incident.name = '';
      const expectedHeaderRequestParams = 'incident.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.escalateIncident = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.escalateIncident(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.escalateIncident as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('createArtifact', () => {
    it('invokes createArtifact without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateArtifactRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Artifact()
      );
      client.innerApiCalls.createArtifact = stubSimpleCall(expectedResponse);
      const [response] = await client.createArtifact(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createArtifact as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createArtifact without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateArtifactRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Artifact()
      );
      client.innerApiCalls.createArtifact = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.createArtifact(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IArtifact | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createArtifact as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createArtifact with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateArtifactRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createArtifact = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.createArtifact(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.createArtifact as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('updateArtifact', () => {
    it('invokes updateArtifact without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateArtifactRequest()
      );
      request.artifact = {};
      request.artifact.name = '';
      const expectedHeaderRequestParams = 'artifact.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Artifact()
      );
      client.innerApiCalls.updateArtifact = stubSimpleCall(expectedResponse);
      const [response] = await client.updateArtifact(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateArtifact as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateArtifact without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateArtifactRequest()
      );
      request.artifact = {};
      request.artifact.name = '';
      const expectedHeaderRequestParams = 'artifact.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Artifact()
      );
      client.innerApiCalls.updateArtifact = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.updateArtifact(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IArtifact | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateArtifact as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateArtifact with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateArtifactRequest()
      );
      request.artifact = {};
      request.artifact.name = '';
      const expectedHeaderRequestParams = 'artifact.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateArtifact = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.updateArtifact(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.updateArtifact as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('deleteArtifact', () => {
    it('invokes deleteArtifact without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteArtifactRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteArtifact = stubSimpleCall(expectedResponse);
      const [response] = await client.deleteArtifact(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteArtifact as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteArtifact without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteArtifactRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteArtifact = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.deleteArtifact(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteArtifact as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteArtifact with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteArtifactRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteArtifact = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.deleteArtifact(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.deleteArtifact as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('sendShiftHandoff', () => {
    it('invokes sendShiftHandoff without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SendShiftHandoffRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SendShiftHandoffResponse()
      );
      client.innerApiCalls.sendShiftHandoff = stubSimpleCall(expectedResponse);
      const [response] = await client.sendShiftHandoff(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.sendShiftHandoff as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes sendShiftHandoff without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SendShiftHandoffRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SendShiftHandoffResponse()
      );
      client.innerApiCalls.sendShiftHandoff = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.sendShiftHandoff(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.ISendShiftHandoffResponse | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.sendShiftHandoff as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes sendShiftHandoff with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SendShiftHandoffRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.sendShiftHandoff = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.sendShiftHandoff(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.sendShiftHandoff as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('createSubscription', () => {
    it('invokes createSubscription without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateSubscriptionRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Subscription()
      );
      client.innerApiCalls.createSubscription = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.createSubscription(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createSubscription without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateSubscriptionRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Subscription()
      );
      client.innerApiCalls.createSubscription = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.createSubscription(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.ISubscription | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createSubscription with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateSubscriptionRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createSubscription = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.createSubscription(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.createSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('updateSubscription', () => {
    it('invokes updateSubscription without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateSubscriptionRequest()
      );
      request.subscription = {};
      request.subscription.name = '';
      const expectedHeaderRequestParams = 'subscription.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Subscription()
      );
      client.innerApiCalls.updateSubscription = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.updateSubscription(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes updateSubscription without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateSubscriptionRequest()
      );
      request.subscription = {};
      request.subscription.name = '';
      const expectedHeaderRequestParams = 'subscription.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.Subscription()
      );
      client.innerApiCalls.updateSubscription = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.updateSubscription(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.ISubscription | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.updateSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes updateSubscription with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.UpdateSubscriptionRequest()
      );
      request.subscription = {};
      request.subscription.name = '';
      const expectedHeaderRequestParams = 'subscription.name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.updateSubscription = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.updateSubscription(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.updateSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('deleteSubscription', () => {
    it('invokes deleteSubscription without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteSubscriptionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteSubscription = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.deleteSubscription(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteSubscription without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteSubscriptionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteSubscription = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.deleteSubscription(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteSubscription with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteSubscriptionRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteSubscription = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.deleteSubscription(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.deleteSubscription as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('createIncidentRoleAssignment', () => {
    it('invokes createIncidentRoleAssignment without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateIncidentRoleAssignmentRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
      );
      client.innerApiCalls.createIncidentRoleAssignment = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.createIncidentRoleAssignment(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createIncidentRoleAssignment as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes createIncidentRoleAssignment without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateIncidentRoleAssignmentRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
      );
      client.innerApiCalls.createIncidentRoleAssignment = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.createIncidentRoleAssignment(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IIncidentRoleAssignment | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.createIncidentRoleAssignment as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes createIncidentRoleAssignment with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CreateIncidentRoleAssignmentRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.createIncidentRoleAssignment = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.createIncidentRoleAssignment(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.createIncidentRoleAssignment as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('deleteIncidentRoleAssignment', () => {
    it('invokes deleteIncidentRoleAssignment without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteIncidentRoleAssignmentRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteIncidentRoleAssignment = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.deleteIncidentRoleAssignment(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteIncidentRoleAssignment as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes deleteIncidentRoleAssignment without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteIncidentRoleAssignmentRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.protobuf.Empty()
      );
      client.innerApiCalls.deleteIncidentRoleAssignment = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.deleteIncidentRoleAssignment(
          request,
          (
            err?: Error | null,
            result?: protos.google.protobuf.IEmpty | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.deleteIncidentRoleAssignment as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes deleteIncidentRoleAssignment with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.DeleteIncidentRoleAssignmentRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.deleteIncidentRoleAssignment = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.deleteIncidentRoleAssignment(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.deleteIncidentRoleAssignment as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('requestIncidentRoleHandover', () => {
    it('invokes requestIncidentRoleHandover without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.RequestIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
      );
      client.innerApiCalls.requestIncidentRoleHandover = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.requestIncidentRoleHandover(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.requestIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes requestIncidentRoleHandover without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.RequestIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
      );
      client.innerApiCalls.requestIncidentRoleHandover = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.requestIncidentRoleHandover(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IIncidentRoleAssignment | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.requestIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes requestIncidentRoleHandover with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.RequestIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.requestIncidentRoleHandover = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.requestIncidentRoleHandover(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.requestIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('confirmIncidentRoleHandover', () => {
    it('invokes confirmIncidentRoleHandover without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ConfirmIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
      );
      client.innerApiCalls.confirmIncidentRoleHandover = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.confirmIncidentRoleHandover(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.confirmIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes confirmIncidentRoleHandover without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ConfirmIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
      );
      client.innerApiCalls.confirmIncidentRoleHandover = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.confirmIncidentRoleHandover(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IIncidentRoleAssignment | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.confirmIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes confirmIncidentRoleHandover with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ConfirmIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.confirmIncidentRoleHandover = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.confirmIncidentRoleHandover(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.confirmIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('forceIncidentRoleHandover', () => {
    it('invokes forceIncidentRoleHandover without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ForceIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
      );
      client.innerApiCalls.forceIncidentRoleHandover = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.forceIncidentRoleHandover(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.forceIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes forceIncidentRoleHandover without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ForceIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
      );
      client.innerApiCalls.forceIncidentRoleHandover = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.forceIncidentRoleHandover(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IIncidentRoleAssignment | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.forceIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes forceIncidentRoleHandover with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ForceIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.forceIncidentRoleHandover = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.forceIncidentRoleHandover(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.forceIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('cancelIncidentRoleHandover', () => {
    it('invokes cancelIncidentRoleHandover without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CancelIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
      );
      client.innerApiCalls.cancelIncidentRoleHandover = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.cancelIncidentRoleHandover(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.cancelIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes cancelIncidentRoleHandover without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CancelIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
      );
      client.innerApiCalls.cancelIncidentRoleHandover = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.cancelIncidentRoleHandover(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IIncidentRoleAssignment | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.cancelIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes cancelIncidentRoleHandover with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.CancelIncidentRoleHandoverRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.cancelIncidentRoleHandover = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.cancelIncidentRoleHandover(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.cancelIncidentRoleHandover as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });
  });

  describe('searchIncidents', () => {
    it('invokes searchIncidents without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchIncidentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
      ];
      client.innerApiCalls.searchIncidents = stubSimpleCall(expectedResponse);
      const [response] = await client.searchIncidents(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.searchIncidents as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes searchIncidents without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchIncidentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
      ];
      client.innerApiCalls.searchIncidents = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.searchIncidents(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IIncident[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.searchIncidents as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes searchIncidents with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchIncidentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.searchIncidents = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.searchIncidents(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.searchIncidents as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes searchIncidentsStream without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchIncidentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
      ];
      client.descriptors.page.searchIncidents.createStream = stubPageStreamingCall(
        expectedResponse
      );
      const stream = client.searchIncidentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Incident[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.irm.v1alpha2.Incident) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.searchIncidents.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchIncidents, request)
      );
      assert.strictEqual(
        (client.descriptors.page.searchIncidents
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('invokes searchIncidentsStream with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchIncidentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.searchIncidents.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.searchIncidentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Incident[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.irm.v1alpha2.Incident) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      assert.rejects(async () => {
        await promise;
      }, expectedError);
      assert(
        (client.descriptors.page.searchIncidents.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchIncidents, request)
      );
      assert.strictEqual(
        (client.descriptors.page.searchIncidents
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with searchIncidents without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchIncidentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Incident()),
      ];
      client.descriptors.page.searchIncidents.asyncIterate = stubAsyncIterationCall(
        expectedResponse
      );
      const responses: protos.google.cloud.irm.v1alpha2.IIncident[] = [];
      const iterable = client.searchIncidentsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.searchIncidents
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.searchIncidents
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with searchIncidents with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchIncidentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.searchIncidents.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.searchIncidentsAsync(request);
      assert.rejects(async () => {
        const responses: protos.google.cloud.irm.v1alpha2.IIncident[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.searchIncidents
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.searchIncidents
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });
  });

  describe('searchSimilarIncidents', () => {
    it('invokes searchSimilarIncidents without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
      ];
      client.innerApiCalls.searchSimilarIncidents = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.searchSimilarIncidents(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.searchSimilarIncidents as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes searchSimilarIncidents without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
      ];
      client.innerApiCalls.searchSimilarIncidents = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.searchSimilarIncidents(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.IResult[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.searchSimilarIncidents as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes searchSimilarIncidents with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.searchSimilarIncidents = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.searchSimilarIncidents(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.searchSimilarIncidents as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes searchSimilarIncidentsStream without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
      ];
      client.descriptors.page.searchSimilarIncidents.createStream = stubPageStreamingCall(
        expectedResponse
      );
      const stream = client.searchSimilarIncidentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result[] = [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.searchSimilarIncidents
          .createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchSimilarIncidents, request)
      );
      assert.strictEqual(
        (client.descriptors.page.searchSimilarIncidents
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('invokes searchSimilarIncidentsStream with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.descriptors.page.searchSimilarIncidents.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.searchSimilarIncidentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result[] = [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      assert.rejects(async () => {
        await promise;
      }, expectedError);
      assert(
        (client.descriptors.page.searchSimilarIncidents
          .createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchSimilarIncidents, request)
      );
      assert.strictEqual(
        (client.descriptors.page.searchSimilarIncidents
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with searchSimilarIncidents without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.Result()
        ),
      ];
      client.descriptors.page.searchSimilarIncidents.asyncIterate = stubAsyncIterationCall(
        expectedResponse
      );
      const responses: protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.IResult[] = [];
      const iterable = client.searchSimilarIncidentsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.searchSimilarIncidents
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.searchSimilarIncidents
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with searchSimilarIncidents with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsRequest()
      );
      request.name = '';
      const expectedHeaderRequestParams = 'name=';
      const expectedError = new Error('expected');
      client.descriptors.page.searchSimilarIncidents.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.searchSimilarIncidentsAsync(request);
      assert.rejects(async () => {
        const responses: protos.google.cloud.irm.v1alpha2.SearchSimilarIncidentsResponse.IResult[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.searchSimilarIncidents
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.searchSimilarIncidents
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listAnnotations', () => {
    it('invokes listAnnotations without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListAnnotationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
      ];
      client.innerApiCalls.listAnnotations = stubSimpleCall(expectedResponse);
      const [response] = await client.listAnnotations(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listAnnotations as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listAnnotations without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListAnnotationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
      ];
      client.innerApiCalls.listAnnotations = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.listAnnotations(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IAnnotation[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listAnnotations as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listAnnotations with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListAnnotationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listAnnotations = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.listAnnotations(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.listAnnotations as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listAnnotationsStream without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListAnnotationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
      ];
      client.descriptors.page.listAnnotations.createStream = stubPageStreamingCall(
        expectedResponse
      );
      const stream = client.listAnnotationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Annotation[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.irm.v1alpha2.Annotation) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listAnnotations.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAnnotations, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listAnnotations
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('invokes listAnnotationsStream with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListAnnotationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listAnnotations.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listAnnotationsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Annotation[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.irm.v1alpha2.Annotation) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      assert.rejects(async () => {
        await promise;
      }, expectedError);
      assert(
        (client.descriptors.page.listAnnotations.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listAnnotations, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listAnnotations
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listAnnotations without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListAnnotationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Annotation()
        ),
      ];
      client.descriptors.page.listAnnotations.asyncIterate = stubAsyncIterationCall(
        expectedResponse
      );
      const responses: protos.google.cloud.irm.v1alpha2.IAnnotation[] = [];
      const iterable = client.listAnnotationsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listAnnotations
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listAnnotations
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listAnnotations with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListAnnotationsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listAnnotations.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listAnnotationsAsync(request);
      assert.rejects(async () => {
        const responses: protos.google.cloud.irm.v1alpha2.IAnnotation[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listAnnotations
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listAnnotations
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listTags', () => {
    it('invokes listTags without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
      ];
      client.innerApiCalls.listTags = stubSimpleCall(expectedResponse);
      const [response] = await client.listTags(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listTags as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listTags without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
      ];
      client.innerApiCalls.listTags = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.listTags(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.ITag[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listTags as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listTags with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listTags = stubSimpleCall(undefined, expectedError);
      assert.rejects(async () => {
        await client.listTags(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.listTags as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listTagsStream without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
      ];
      client.descriptors.page.listTags.createStream = stubPageStreamingCall(
        expectedResponse
      );
      const stream = client.listTagsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Tag[] = [];
        stream.on('data', (response: protos.google.cloud.irm.v1alpha2.Tag) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listTags.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTags, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listTags.createStream as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('invokes listTagsStream with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listTags.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listTagsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Tag[] = [];
        stream.on('data', (response: protos.google.cloud.irm.v1alpha2.Tag) => {
          responses.push(response);
        });
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      assert.rejects(async () => {
        await promise;
      }, expectedError);
      assert(
        (client.descriptors.page.listTags.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listTags, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listTags.createStream as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listTags without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Tag()),
      ];
      client.descriptors.page.listTags.asyncIterate = stubAsyncIterationCall(
        expectedResponse
      );
      const responses: protos.google.cloud.irm.v1alpha2.ITag[] = [];
      const iterable = client.listTagsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listTags.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listTags.asyncIterate as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listTags with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListTagsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listTags.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listTagsAsync(request);
      assert.rejects(async () => {
        const responses: protos.google.cloud.irm.v1alpha2.ITag[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listTags.asyncIterate as SinonStub).getCall(0)
          .args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listTags.asyncIterate as SinonStub).getCall(0)
          .args[2].otherArgs.headers['x-goog-request-params'],
        expectedHeaderRequestParams
      );
    });
  });

  describe('searchSignals', () => {
    it('invokes searchSignals without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSignalsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
      ];
      client.innerApiCalls.searchSignals = stubSimpleCall(expectedResponse);
      const [response] = await client.searchSignals(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.searchSignals as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes searchSignals without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSignalsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
      ];
      client.innerApiCalls.searchSignals = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.searchSignals(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.ISignal[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.searchSignals as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes searchSignals with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSignalsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.searchSignals = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.searchSignals(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.searchSignals as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes searchSignalsStream without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSignalsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
      ];
      client.descriptors.page.searchSignals.createStream = stubPageStreamingCall(
        expectedResponse
      );
      const stream = client.searchSignalsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Signal[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.irm.v1alpha2.Signal) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.searchSignals.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchSignals, request)
      );
      assert.strictEqual(
        (client.descriptors.page.searchSignals
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('invokes searchSignalsStream with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSignalsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.searchSignals.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.searchSignalsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Signal[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.irm.v1alpha2.Signal) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      assert.rejects(async () => {
        await promise;
      }, expectedError);
      assert(
        (client.descriptors.page.searchSignals.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.searchSignals, request)
      );
      assert.strictEqual(
        (client.descriptors.page.searchSignals
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with searchSignals without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSignalsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Signal()),
      ];
      client.descriptors.page.searchSignals.asyncIterate = stubAsyncIterationCall(
        expectedResponse
      );
      const responses: protos.google.cloud.irm.v1alpha2.ISignal[] = [];
      const iterable = client.searchSignalsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.searchSignals
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.searchSignals
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with searchSignals with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.SearchSignalsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.searchSignals.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.searchSignalsAsync(request);
      assert.rejects(async () => {
        const responses: protos.google.cloud.irm.v1alpha2.ISignal[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.searchSignals
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.searchSignals
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listArtifacts', () => {
    it('invokes listArtifacts without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListArtifactsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
      ];
      client.innerApiCalls.listArtifacts = stubSimpleCall(expectedResponse);
      const [response] = await client.listArtifacts(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listArtifacts as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listArtifacts without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListArtifactsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
      ];
      client.innerApiCalls.listArtifacts = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.listArtifacts(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.IArtifact[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listArtifacts as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listArtifacts with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListArtifactsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listArtifacts = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.listArtifacts(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.listArtifacts as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listArtifactsStream without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListArtifactsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
      ];
      client.descriptors.page.listArtifacts.createStream = stubPageStreamingCall(
        expectedResponse
      );
      const stream = client.listArtifactsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Artifact[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.irm.v1alpha2.Artifact) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listArtifacts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listArtifacts, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listArtifacts
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('invokes listArtifactsStream with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListArtifactsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listArtifacts.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listArtifactsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Artifact[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.irm.v1alpha2.Artifact) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      assert.rejects(async () => {
        await promise;
      }, expectedError);
      assert(
        (client.descriptors.page.listArtifacts.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listArtifacts, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listArtifacts
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listArtifacts without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListArtifactsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
        generateSampleMessage(new protos.google.cloud.irm.v1alpha2.Artifact()),
      ];
      client.descriptors.page.listArtifacts.asyncIterate = stubAsyncIterationCall(
        expectedResponse
      );
      const responses: protos.google.cloud.irm.v1alpha2.IArtifact[] = [];
      const iterable = client.listArtifactsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listArtifacts
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listArtifacts
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listArtifacts with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListArtifactsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listArtifacts.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listArtifactsAsync(request);
      assert.rejects(async () => {
        const responses: protos.google.cloud.irm.v1alpha2.IArtifact[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listArtifacts
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listArtifacts
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listSubscriptions', () => {
    it('invokes listSubscriptions without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListSubscriptionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
      ];
      client.innerApiCalls.listSubscriptions = stubSimpleCall(expectedResponse);
      const [response] = await client.listSubscriptions(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listSubscriptions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listSubscriptions without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListSubscriptionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
      ];
      client.innerApiCalls.listSubscriptions = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.listSubscriptions(
          request,
          (
            err?: Error | null,
            result?: protos.google.cloud.irm.v1alpha2.ISubscription[] | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listSubscriptions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listSubscriptions with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListSubscriptionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listSubscriptions = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.listSubscriptions(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.listSubscriptions as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listSubscriptionsStream without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListSubscriptionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
      ];
      client.descriptors.page.listSubscriptions.createStream = stubPageStreamingCall(
        expectedResponse
      );
      const stream = client.listSubscriptionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Subscription[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.irm.v1alpha2.Subscription) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listSubscriptions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSubscriptions, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listSubscriptions
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('invokes listSubscriptionsStream with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListSubscriptionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listSubscriptions.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listSubscriptionsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.Subscription[] = [];
        stream.on(
          'data',
          (response: protos.google.cloud.irm.v1alpha2.Subscription) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      assert.rejects(async () => {
        await promise;
      }, expectedError);
      assert(
        (client.descriptors.page.listSubscriptions.createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listSubscriptions, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listSubscriptions
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listSubscriptions without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListSubscriptionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.Subscription()
        ),
      ];
      client.descriptors.page.listSubscriptions.asyncIterate = stubAsyncIterationCall(
        expectedResponse
      );
      const responses: protos.google.cloud.irm.v1alpha2.ISubscription[] = [];
      const iterable = client.listSubscriptionsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listSubscriptions
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listSubscriptions
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listSubscriptions with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListSubscriptionsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listSubscriptions.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listSubscriptionsAsync(request);
      assert.rejects(async () => {
        const responses: protos.google.cloud.irm.v1alpha2.ISubscription[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listSubscriptions
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listSubscriptions
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });
  });

  describe('listIncidentRoleAssignments', () => {
    it('invokes listIncidentRoleAssignments without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListIncidentRoleAssignmentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
      ];
      client.innerApiCalls.listIncidentRoleAssignments = stubSimpleCall(
        expectedResponse
      );
      const [response] = await client.listIncidentRoleAssignments(request);
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listIncidentRoleAssignments as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listIncidentRoleAssignments without error using callback', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListIncidentRoleAssignmentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
      ];
      client.innerApiCalls.listIncidentRoleAssignments = stubSimpleCallWithCallback(
        expectedResponse
      );
      const promise = new Promise((resolve, reject) => {
        client.listIncidentRoleAssignments(
          request,
          (
            err?: Error | null,
            result?:
              | protos.google.cloud.irm.v1alpha2.IIncidentRoleAssignment[]
              | null
          ) => {
            if (err) {
              reject(err);
            } else {
              resolve(result);
            }
          }
        );
      });
      const response = await promise;
      assert.deepStrictEqual(response, expectedResponse);
      assert(
        (client.innerApiCalls.listIncidentRoleAssignments as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions /*, callback defined above */)
      );
    });

    it('invokes listIncidentRoleAssignments with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListIncidentRoleAssignmentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedOptions = {
        otherArgs: {
          headers: {
            'x-goog-request-params': expectedHeaderRequestParams,
          },
        },
      };
      const expectedError = new Error('expected');
      client.innerApiCalls.listIncidentRoleAssignments = stubSimpleCall(
        undefined,
        expectedError
      );
      assert.rejects(async () => {
        await client.listIncidentRoleAssignments(request);
      }, expectedError);
      assert(
        (client.innerApiCalls.listIncidentRoleAssignments as SinonStub)
          .getCall(0)
          .calledWith(request, expectedOptions, undefined)
      );
    });

    it('invokes listIncidentRoleAssignmentsStream without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListIncidentRoleAssignmentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
      ];
      client.descriptors.page.listIncidentRoleAssignments.createStream = stubPageStreamingCall(
        expectedResponse
      );
      const stream = client.listIncidentRoleAssignmentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment[] = [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      const responses = await promise;
      assert.deepStrictEqual(responses, expectedResponse);
      assert(
        (client.descriptors.page.listIncidentRoleAssignments
          .createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listIncidentRoleAssignments, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listIncidentRoleAssignments
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('invokes listIncidentRoleAssignmentsStream with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListIncidentRoleAssignmentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listIncidentRoleAssignments.createStream = stubPageStreamingCall(
        undefined,
        expectedError
      );
      const stream = client.listIncidentRoleAssignmentsStream(request);
      const promise = new Promise((resolve, reject) => {
        const responses: protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment[] = [];
        stream.on(
          'data',
          (
            response: protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment
          ) => {
            responses.push(response);
          }
        );
        stream.on('end', () => {
          resolve(responses);
        });
        stream.on('error', (err: Error) => {
          reject(err);
        });
      });
      assert.rejects(async () => {
        await promise;
      }, expectedError);
      assert(
        (client.descriptors.page.listIncidentRoleAssignments
          .createStream as SinonStub)
          .getCall(0)
          .calledWith(client.innerApiCalls.listIncidentRoleAssignments, request)
      );
      assert.strictEqual(
        (client.descriptors.page.listIncidentRoleAssignments
          .createStream as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listIncidentRoleAssignments without error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListIncidentRoleAssignmentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedResponse = [
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
        generateSampleMessage(
          new protos.google.cloud.irm.v1alpha2.IncidentRoleAssignment()
        ),
      ];
      client.descriptors.page.listIncidentRoleAssignments.asyncIterate = stubAsyncIterationCall(
        expectedResponse
      );
      const responses: protos.google.cloud.irm.v1alpha2.IIncidentRoleAssignment[] = [];
      const iterable = client.listIncidentRoleAssignmentsAsync(request);
      for await (const resource of iterable) {
        responses.push(resource!);
      }
      assert.deepStrictEqual(responses, expectedResponse);
      assert.deepStrictEqual(
        (client.descriptors.page.listIncidentRoleAssignments
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listIncidentRoleAssignments
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });

    it('uses async iteration with listIncidentRoleAssignments with error', async () => {
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      const request = generateSampleMessage(
        new protos.google.cloud.irm.v1alpha2.ListIncidentRoleAssignmentsRequest()
      );
      request.parent = '';
      const expectedHeaderRequestParams = 'parent=';
      const expectedError = new Error('expected');
      client.descriptors.page.listIncidentRoleAssignments.asyncIterate = stubAsyncIterationCall(
        undefined,
        expectedError
      );
      const iterable = client.listIncidentRoleAssignmentsAsync(request);
      assert.rejects(async () => {
        const responses: protos.google.cloud.irm.v1alpha2.IIncidentRoleAssignment[] = [];
        for await (const resource of iterable) {
          responses.push(resource!);
        }
      });
      assert.deepStrictEqual(
        (client.descriptors.page.listIncidentRoleAssignments
          .asyncIterate as SinonStub).getCall(0).args[1],
        request
      );
      assert.strictEqual(
        (client.descriptors.page.listIncidentRoleAssignments
          .asyncIterate as SinonStub).getCall(0).args[2].otherArgs.headers[
          'x-goog-request-params'
        ],
        expectedHeaderRequestParams
      );
    });
  });

  describe('Path templates', () => {
    describe('annotation', () => {
      const fakePath = '/rendered/path/annotation';
      const expectedParameters = {
        project: 'projectValue',
        incident: 'incidentValue',
        annotation: 'annotationValue',
      };
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.annotationPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.annotationPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('annotationPath', () => {
        const result = client.annotationPath(
          'projectValue',
          'incidentValue',
          'annotationValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.annotationPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromAnnotationName', () => {
        const result = client.matchProjectFromAnnotationName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIncidentFromAnnotationName', () => {
        const result = client.matchIncidentFromAnnotationName(fakePath);
        assert.strictEqual(result, 'incidentValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchAnnotationFromAnnotationName', () => {
        const result = client.matchAnnotationFromAnnotationName(fakePath);
        assert.strictEqual(result, 'annotationValue');
        assert(
          (client.pathTemplates.annotationPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('artifact', () => {
      const fakePath = '/rendered/path/artifact';
      const expectedParameters = {
        project: 'projectValue',
        incident: 'incidentValue',
        artifact: 'artifactValue',
      };
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.artifactPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.artifactPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('artifactPath', () => {
        const result = client.artifactPath(
          'projectValue',
          'incidentValue',
          'artifactValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.artifactPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromArtifactName', () => {
        const result = client.matchProjectFromArtifactName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.artifactPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIncidentFromArtifactName', () => {
        const result = client.matchIncidentFromArtifactName(fakePath);
        assert.strictEqual(result, 'incidentValue');
        assert(
          (client.pathTemplates.artifactPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchArtifactFromArtifactName', () => {
        const result = client.matchArtifactFromArtifactName(fakePath);
        assert.strictEqual(result, 'artifactValue');
        assert(
          (client.pathTemplates.artifactPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('incident', () => {
      const fakePath = '/rendered/path/incident';
      const expectedParameters = {
        project: 'projectValue',
        incident: 'incidentValue',
      };
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.incidentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.incidentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('incidentPath', () => {
        const result = client.incidentPath('projectValue', 'incidentValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.incidentPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromIncidentName', () => {
        const result = client.matchProjectFromIncidentName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.incidentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIncidentFromIncidentName', () => {
        const result = client.matchIncidentFromIncidentName(fakePath);
        assert.strictEqual(result, 'incidentValue');
        assert(
          (client.pathTemplates.incidentPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('incidentRoleAssignment', () => {
      const fakePath = '/rendered/path/incidentRoleAssignment';
      const expectedParameters = {
        project_id_or_number: 'projectIdOrNumberValue',
        incident_id: 'incidentIdValue',
        role_id: 'roleIdValue',
      };
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.incidentRoleAssignmentPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.incidentRoleAssignmentPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('incidentRoleAssignmentPath', () => {
        const result = client.incidentRoleAssignmentPath(
          'projectIdOrNumberValue',
          'incidentIdValue',
          'roleIdValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.incidentRoleAssignmentPathTemplate
            .render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectIdOrNumberFromIncidentRoleAssignmentName', () => {
        const result = client.matchProjectIdOrNumberFromIncidentRoleAssignmentName(
          fakePath
        );
        assert.strictEqual(result, 'projectIdOrNumberValue');
        assert(
          (client.pathTemplates.incidentRoleAssignmentPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIncidentIdFromIncidentRoleAssignmentName', () => {
        const result = client.matchIncidentIdFromIncidentRoleAssignmentName(
          fakePath
        );
        assert.strictEqual(result, 'incidentIdValue');
        assert(
          (client.pathTemplates.incidentRoleAssignmentPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchRoleIdFromIncidentRoleAssignmentName', () => {
        const result = client.matchRoleIdFromIncidentRoleAssignmentName(
          fakePath
        );
        assert.strictEqual(result, 'roleIdValue');
        assert(
          (client.pathTemplates.incidentRoleAssignmentPathTemplate
            .match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('project', () => {
      const fakePath = '/rendered/path/project';
      const expectedParameters = {
        project: 'projectValue',
      };
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.projectPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.projectPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('projectPath', () => {
        const result = client.projectPath('projectValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.projectPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromProjectName', () => {
        const result = client.matchProjectFromProjectName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.projectPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('signal', () => {
      const fakePath = '/rendered/path/signal';
      const expectedParameters = {
        project: 'projectValue',
        signal: 'signalValue',
      };
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.signalPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.signalPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('signalPath', () => {
        const result = client.signalPath('projectValue', 'signalValue');
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.signalPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSignalName', () => {
        const result = client.matchProjectFromSignalName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.signalPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSignalFromSignalName', () => {
        const result = client.matchSignalFromSignalName(fakePath);
        assert.strictEqual(result, 'signalValue');
        assert(
          (client.pathTemplates.signalPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('subscription', () => {
      const fakePath = '/rendered/path/subscription';
      const expectedParameters = {
        project: 'projectValue',
        incident: 'incidentValue',
        subscription: 'subscriptionValue',
      };
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.subscriptionPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.subscriptionPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('subscriptionPath', () => {
        const result = client.subscriptionPath(
          'projectValue',
          'incidentValue',
          'subscriptionValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.subscriptionPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromSubscriptionName', () => {
        const result = client.matchProjectFromSubscriptionName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.subscriptionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIncidentFromSubscriptionName', () => {
        const result = client.matchIncidentFromSubscriptionName(fakePath);
        assert.strictEqual(result, 'incidentValue');
        assert(
          (client.pathTemplates.subscriptionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchSubscriptionFromSubscriptionName', () => {
        const result = client.matchSubscriptionFromSubscriptionName(fakePath);
        assert.strictEqual(result, 'subscriptionValue');
        assert(
          (client.pathTemplates.subscriptionPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });

    describe('tag', () => {
      const fakePath = '/rendered/path/tag';
      const expectedParameters = {
        project: 'projectValue',
        incident: 'incidentValue',
        tag: 'tagValue',
      };
      const client = new incidentserviceModule.v1alpha2.IncidentServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      client.initialize();
      client.pathTemplates.tagPathTemplate.render = sinon
        .stub()
        .returns(fakePath);
      client.pathTemplates.tagPathTemplate.match = sinon
        .stub()
        .returns(expectedParameters);

      it('tagPath', () => {
        const result = client.tagPath(
          'projectValue',
          'incidentValue',
          'tagValue'
        );
        assert.strictEqual(result, fakePath);
        assert(
          (client.pathTemplates.tagPathTemplate.render as SinonStub)
            .getCall(-1)
            .calledWith(expectedParameters)
        );
      });

      it('matchProjectFromTagName', () => {
        const result = client.matchProjectFromTagName(fakePath);
        assert.strictEqual(result, 'projectValue');
        assert(
          (client.pathTemplates.tagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchIncidentFromTagName', () => {
        const result = client.matchIncidentFromTagName(fakePath);
        assert.strictEqual(result, 'incidentValue');
        assert(
          (client.pathTemplates.tagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });

      it('matchTagFromTagName', () => {
        const result = client.matchTagFromTagName(fakePath);
        assert.strictEqual(result, 'tagValue');
        assert(
          (client.pathTemplates.tagPathTemplate.match as SinonStub)
            .getCall(-1)
            .calledWith(fakePath)
        );
      });
    });
  });
});
